// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String    @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
}

model HeroImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  src       String
  alt       String?
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           String
  discountedPrice String?
  link            String?
  images          Image[] //TODO add reviews, rating ve rating count
  colors          Color[]
  sizes           Size[]
  description     String
  details         String[]
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String   @db.ObjectId
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  imageSrc  String
  imageAlt  String
  primary   Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Color {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  name      String
  color     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Size {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  name      String
  inStock   Boolean
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
